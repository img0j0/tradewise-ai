version: '3.8'

services:
  # Main Web Application
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "${PORT:-5000}:5000"
    environment:
      # Critical Environment Variables
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:${DOCKER_POSTGRES_PASSWORD:-tradewise_db_password}@db:5432/${DOCKER_POSTGRES_DB:-tradewise}}
      - REDIS_URL=${REDIS_URL:-redis://:${DOCKER_REDIS_PASSWORD:-tradewise_redis_password}@redis:6379/0}
      - SESSION_SECRET=${SESSION_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      
      # Optional Configuration
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ASYNC_WORKERS_ENABLED=${ASYNC_WORKERS_ENABLED:-true}
      - ASYNC_WORKER_COUNT=${ASYNC_WORKER_COUNT:-3}
      
      # Error Notifications
      - ERROR_NOTIFICATIONS_ENABLED=${ERROR_NOTIFICATIONS_ENABLED:-false}
      - SLACK_ERROR_WEBHOOK=${SLACK_ERROR_WEBHOOK}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - ERROR_EMAIL=${ERROR_EMAIL}
      
      # Health Check Configuration
      - HEALTH_CHECK_TIMEOUT=${HEALTH_CHECK_TIMEOUT:-10}
      - REDIS_HEALTH_CHECK_ENABLED=true
      - DATABASE_HEALTH_CHECK_ENABLED=true
      - API_HEALTH_CHECK_ENABLED=true
      
      # Performance Settings
      - PERFORMANCE_MONITORING_ENABLED=${PERFORMANCE_MONITORING_ENABLED:-true}
      - PREMIUM_FEATURES_ENABLED=${PREMIUM_FEATURES_ENABLED:-true}
      
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./static:/app/static
    networks:
      - tradewise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health/startup"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Background Worker Service
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      # Same environment as web app
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:${DOCKER_POSTGRES_PASSWORD:-tradewise_db_password}@db:5432/${DOCKER_POSTGRES_DB:-tradewise}}
      - REDIS_URL=${REDIS_URL:-redis://:${DOCKER_REDIS_PASSWORD:-tradewise_redis_password}@redis:6379/0}
      - SESSION_SECRET=${SESSION_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ASYNC_WORKER_COUNT=${ASYNC_WORKER_COUNT:-3}
      - ERROR_NOTIFICATIONS_ENABLED=${ERROR_NOTIFICATIONS_ENABLED:-false}
      - SLACK_ERROR_WEBHOOK=${SLACK_ERROR_WEBHOOK}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - ERROR_EMAIL=${ERROR_EMAIL}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - tradewise-network
    restart: unless-stopped
    deploy:
      replicas: ${WORKER_REPLICAS:-2}
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.from_url('${REDIS_URL:-redis://:${DOCKER_REDIS_PASSWORD:-tradewise_redis_password}@redis:6379/0}'); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${DOCKER_POSTGRES_DB:-tradewise}
      - POSTGRES_USER=${DOCKER_POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${DOCKER_POSTGRES_PASSWORD:-tradewise_db_password}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - tradewise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DOCKER_POSTGRES_USER:-postgres} -d ${DOCKER_POSTGRES_DB:-tradewise}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true

  # Redis Cache and Task Queue
  redis:
    image: redis:7-alpine
    command: >
      redis-server 
      --requirepass ${DOCKER_REDIS_PASSWORD:-tradewise_redis_password}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - tradewise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true

  # Nginx Reverse Proxy (Optional for Production)
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - web
    networks:
      - tradewise-network
    restart: unless-stopped
    profiles:
      - production
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  tradewise-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16